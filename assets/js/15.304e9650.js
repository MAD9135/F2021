(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{369:function(t,e,r){t.exports=r.p+"assets/img/testingTrophyWithLabels.3c2b5939.png"},410:function(t,e,r){"use strict";r.r(e);var a=r(26),o=Object(a.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("PageHeader"),t._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("p",[t._v("This series of four assignments and their related activities is focused on the valuable topic of testing your JavaScrip applications. Each of the four modules will introduce you to a different aspect of testing best practices. There is a lot more to learn, but these will give you a good foundation.")]),t._v(" "),a("p",[t._v("All together the Hybrids are worth "),a("strong",[t._v("30%")]),t._v(" of your final grade.")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",{staticStyle:{"text-align":"left"}},[t._v("Assignment")]),t._v(" "),a("th",{staticStyle:{"text-align":"right"}},[t._v("Weight")]),t._v(" "),a("th",{staticStyle:{"text-align":"left"}},[t._v("Due")])])]),t._v(" "),a("tbody",[a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"h1"}},[t._v("Static Testing")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("25%")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Week 3")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"h2"}},[t._v("Unit Testing")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("25%")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Week 5")])]),t._v(" "),a("tr",[a("td",{staticStyle:{"text-align":"left"}},[a("a",{attrs:{href:"h3"}},[t._v("Firebase")])]),t._v(" "),a("td",{staticStyle:{"text-align":"right"}},[t._v("50%")]),t._v(" "),a("td",{staticStyle:{"text-align":"left"}},[t._v("Week 10")])])])]),t._v(" "),a("p",[t._v("Before you dive in, read this brief backgrounder.")]),t._v(" "),a("h2",{attrs:{id:"why-write-javascript-tests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-write-javascript-tests"}},[t._v("#")]),t._v(" Why write JavaScript tests?")]),t._v(" "),a("p",[a("span",{staticStyle:{"font-size":"1.25rem","font-weight":"300"}},[t._v("Experienced developers write almost as much code for automated tests as they do for the core application. Why?")])]),t._v(" "),a("h4",{attrs:{id:"confidence"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#confidence"}},[t._v("#")]),t._v(" Confidence")]),t._v(" "),a("p",[t._v("Confidence that the code they have written conforms to the requirements. Confidence that they have handled as many error cases as they can think of. Confidence that they have not accidentally broken some previously working module. Confidence to refactor their implementation in a way that is more efficient or more maintainable, without changing the behaviour.")]),t._v(" "),a("p",[t._v("Some developers write their application code and then write tests to find the missed error cases.")]),t._v(" "),a("p",[t._v("Others write the tests first, to define the expected range of inputs and outputs from each module/function. This is called Test Driven Development (TDD). There are other variations on this like Behaviour Driven Development (BDD) or Domain Driven Development (DDD), but the basic philosophy is the same ...")]),t._v(" "),a("ol",[a("li",[t._v("write tests first,")]),t._v(" "),a("li",[t._v("then write the simplest implementation of your application code to make that test pass,")]),t._v(" "),a("li",[t._v("and then refactor/optimize your code.")])]),t._v(" "),a("h4",{attrs:{id:"two-important-tips"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#two-important-tips"}},[t._v("#")]),t._v(" Two important tips")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Test functionality NOT implementation")]),t._v(" "),a("p",[t._v("The best way to avoid writing brittle tests that constantly need to be updated, is to focus on the input and output of any given function or component. Your tests should not rely on knowledge of the implementation details of the thing that you are testing!")])]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("Only test your own code")]),t._v(" "),a("p",[t._v("Do not waste time writing tests for the behaviour of third party libraries. They already have their own tests.")])]),t._v(" "),a("h2",{attrs:{id:"different-kinds-of-tests"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#different-kinds-of-tests"}},[t._v("#")]),t._v(" Different kinds of tests")]),t._v(" "),a("p",[t._v("There is static testing, unit testing, integration testing, and end-to-end testing.")]),t._v(" "),a("p",[t._v("You may have heard developers talk about "),a("a",{attrs:{href:"https://martinfowler.com/articles/practical-test-pyramid.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("the testing pyramid"),a("OutboundLink")],1),t._v(". It describes how we layer these different kinds of testing together to make sure that we have reliably checked all of the expected functionality and caught as many potential bugs as we can before our customers do.")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://kentcdodds.com/blog/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Kent C. Dodds"),a("OutboundLink")],1),t._v(", a well known personality in the JavaScript community and maintainer of the "),a("a",{attrs:{href:"https://testing-library.com/docs/react-testing-library/intro",target:"_blank",rel:"noopener noreferrer"}},[t._v("React Testing Library"),a("OutboundLink")],1),t._v(", created a similar analogy using a trophy instead of a pyramid. I think this is a better reflection of the proportionate effort required for each kind of test.")]),t._v(" "),a("p",[a("img",{attrs:{src:r(369),alt:"testing trophy"}})]),t._v(" "),a("p",[t._v("Kent has one of the best online training workshops that I have seen to help you "),a("a",{attrs:{href:"https://testingjavascript.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("learn the best practices in Testing JavaScript"),a("OutboundLink")],1),t._v(". It is not free, but its definitely worth it.")]),t._v(" "),a("h2",{attrs:{id:"tools"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tools"}},[t._v("#")]),t._v(" Tools")]),t._v(" "),a("p",[a("strong",[t._v("Linter")]),a("br"),t._v("\nCatch typos and syntax errors early by integrating a tool like "),a("a",{attrs:{href:"https://www.npmjs.com/package/eslint",target:"_blank",rel:"noopener noreferrer"}},[t._v("eslint"),a("OutboundLink")],1),t._v(" into your code editor. Your team may also setup "),a("a",{attrs:{href:"https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks",target:"_blank",rel:"noopener noreferrer"}},[t._v("git hooks"),a("OutboundLink")],1),t._v(" to automatically run the linter before creating a commit.")]),t._v(" "),a("p",[a("strong",[t._v("Test runner")]),a("br"),t._v("\nAutomates running your project's unit and integration tests, including the setup and cleanup of any required test data. A tool like Jest can be run manually, triggered with "),a("a",{attrs:{href:"https://githooks.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("git hooks"),a("OutboundLink")],1),t._v(", or run continuously in "),a("em",[t._v("watch mode")]),t._v(" while you write your code. There is "),a("strong",[t._v("vscode-jest")]),t._v(" a plugin for VS Code that will do this automatically for you.")]),t._v(" "),a("p",[a("strong",[t._v("Assertion library")]),a("br"),t._v("\nThe assertion library provides a set of "),a("a",{attrs:{href:"https://jestjs.io/docs/en/expect",target:"_blank",rel:"noopener noreferrer"}},[t._v("semantically named comparison methods"),a("OutboundLink")],1),t._v(" to simplify the testing syntax.")]),t._v(" "),a("p",[a("strong",[t._v("Browser Simulator")]),a("br"),t._v("\nFor "),a("em",[t._v("end-to-end")]),t._v(" tests, we are trying to replicate how a real user would interact with the application. To programatically simulate (and reliably replicate) these interactions, we turn to tools like "),a("a",{attrs:{href:"https://www.cypress.io/",target:"_blank",rel:"noopener noreferrer"}},[t._v("cypress"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"mocha-and-chai"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mocha-and-chai"}},[t._v("#")]),t._v(" Mocha and Chai")]),t._v(" "),a("p",[t._v("Mocha ("),a("a",{attrs:{href:"https://mochajs.org/",target:"_blank",rel:"noopener noreferrer"}},[t._v("mochajs.org"),a("OutboundLink")],1),t._v(") is a popular JavaScript testing framework, with over 3 million weekly downloads on NPM. It is most often pared with the "),a("a",{attrs:{href:"https://www.chaijs.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Chai Assertion Library"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"jest"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jest"}},[t._v("#")]),t._v(" Jest")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://jestjs.io",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jest is a newer JavaScript testing library created by the React team"),a("OutboundLink")],1),t._v(". It provides the test runner/reporting framework and an assertion library, replacing both Mocha and Chai. Jest currently has more than 5 million weekly downloads on NPM â€“ likely because it is included in the default project scaffolding created by the "),a("code",[t._v("create-react-app")]),t._v(" and the "),a("code",[t._v("vue create")]),t._v(" CLI tools.")]),t._v(" "),a("p",[t._v("Jest also includes code coverage analysis, snapshot testing, and tools to simplify creating mocks for external services or libraries.")]),t._v(" "),a("p",[t._v("But, one of the strongest reasons to prefer Jest over Mocha/Chai is the clear failure reporting which includes meaningful stack trace excerpts. This makes it "),a("em",[t._v("much easier")]),t._v(" to understand exactly where a test failed and where to fix it.")]),t._v(" "),a("h4",{attrs:{id:"community-support"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#community-support"}},[t._v("#")]),t._v(" Community Support")]),t._v(" "),a("p",[t._v("The Jest community has some "),a("a",{attrs:{href:"https://github.com/jest-community/awesome-jest",target:"_blank",rel:"noopener noreferrer"}},[t._v("really great plugins"),a("OutboundLink")],1),t._v(" that can add additional capabilities. Two in particular that I strongly recommend are "),a("a",{attrs:{href:"https://www.npmjs.com/package/jest-chain",target:"_blank",rel:"noopener noreferrer"}},[t._v("jest-chain"),a("OutboundLink")],1),t._v(" and "),a("a",{attrs:{href:"https://www.npmjs.com/package/jest-extended",target:"_blank",rel:"noopener noreferrer"}},[t._v("jest-extended"),a("OutboundLink")],1),t._v(".")]),t._v(" "),a("p",[t._v("Also baked into the default project configuration with "),a("code",[t._v("create-react-app")]),t._v(" or "),a("code",[t._v("vue create")]),t._v(" is the "),a("a",{attrs:{href:"https://testing-library.com/docs/intro",target:"_blank",rel:"noopener noreferrer"}},[t._v("dom-testing-library"),a("OutboundLink")],1),t._v(". This works really well with Jest to let you write clean integration tests that let you inspect the rendered DOM. There are official wrappers for most popular frontend frameworks, e.g. React, React Native, Vue, Angular, Svelte. It also integrates with Cypress for end-to-end testing.")]),t._v(" "),a("blockquote",[a("p",[t._v("The more your tests resemble the way your software is used, the more confidence they can give you.\nâ€” Kent C. Dodds")])]),t._v(" "),a("h2",{attrs:{id:"watch-this"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#watch-this"}},[t._v("#")]),t._v(" Watch this ...")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://linkedin.com/learning/react-testing-and-debugging",target:"_blank",rel:"noopener noreferrer"}},[t._v("React testing and debugging"),a("OutboundLink")],1),t._v(" video tutorial (about an hour)")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://www.youtube.com/watch?v=Fha2bVoC8SE",target:"_blank",rel:"noopener noreferrer"}},[t._v("Write tests. Not too many. Mostly integration."),a("OutboundLink")],1),t._v(" (about 18 mins).")]),t._v(" "),a("p",[t._v("FunFunFunction video on "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=TWBDa5dqrl8",target:"_blank",rel:"noopener noreferrer"}},[t._v("why and how we do unit tests"),a("OutboundLink")],1),t._v(" (about 18 mins).")]),t._v(" "),a("p",[t._v("FunFunFunction video comparing "),a("a",{attrs:{href:"https://www.youtube.com/watch?v=vqAaMVoKz1c",target:"_blank",rel:"noopener noreferrer"}},[t._v("Integration Tests v.s. Unit Tests"),a("OutboundLink")],1),t._v(" (about 28 mins).")]),t._v(" "),a("h2",{attrs:{id:"additional-resources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#additional-resources"}},[t._v("#")]),t._v(" Additional Resources")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://react-testing-examples.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("React testing examples"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://github.com/sapegin/jest-cheat-sheet",target:"_blank",rel:"noopener noreferrer"}},[t._v("Jest cheat sheet"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://testing-library.com/docs/react-testing-library/cheatsheet",target:"_blank",rel:"noopener noreferrer"}},[t._v("React testing library cheat sheet"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://developerhandbook.com/react/introduction-test-driven-development-react-jest/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Test Driven Development (TDD) with React, React Testing Library, and Jest"),a("OutboundLink")],1)]),t._v(" "),a("p",[a("a",{attrs:{href:"https://youtu.be/qxE1D5qbQJU",target:"_blank",rel:"noopener noreferrer"}},[t._v("Steve's Mocha and Chai video"),a("OutboundLink")],1)])],1)}),[],!1,null,null,null);e.default=o.exports}}]);